import streamlit as st
import requests
import time

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Chatbot T∆∞ V·∫•n ƒêi·ªán Tho·∫°i", page_icon="üí¨", layout="wide")

# --- Kh·ªüi t·∫°o Session State ---
# C·∫•u tr√∫c session state ƒë·ªÉ qu·∫£n l√Ω nhi·ªÅu cu·ªôc h·ªôi tho·∫°i
# `chat_sessions` l√† m·ªôt danh s√°ch, m·ªói ph·∫ßn t·ª≠ l√† m·ªôt cu·ªôc h·ªôi tho·∫°i (c≈©ng l√† m·ªôt danh s√°ch c√°c tin nh·∫Øn)
if "chat_sessions" not in st.session_state:
    # B·∫Øt ƒë·∫ßu v·ªõi m·ªôt cu·ªôc h·ªôi tho·∫°i tr·ªëng
    st.session_state.chat_sessions = [[]] 
if "active_chat_idx" not in st.session_state:
    # Ch·ªâ s·ªë c·ªßa cu·ªôc h·ªôi tho·∫°i ƒëang ho·∫°t ƒë·ªông
    st.session_state.active_chat_idx = 0

# --- Sidebar ƒë·ªÉ qu·∫£n l√Ω c√°c cu·ªôc h·ªôi tho·∫°i ---
with st.sidebar:
    st.title("üìù Cu·ªôc h·ªôi tho·∫°i")
    
    # N√∫t ƒë·ªÉ t·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi
    if st.button("‚ûï T·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi"):
        st.session_state.chat_sessions.append([])
        # Chuy·ªÉn sang cu·ªôc h·ªôi tho·∫°i m·ªõi v·ª´a t·∫°o
        st.session_state.active_chat_idx = len(st.session_state.chat_sessions) - 1
        st.rerun() # Ch·∫°y l·∫°i script ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán

    st.markdown("---")

    # Hi·ªÉn th·ªã danh s√°ch c√°c cu·ªôc h·ªôi tho·∫°i ƒë·ªÉ ch·ªçn
    # D√πng st.radio ƒë·ªÉ ch·ªçn, khi ch·ªçn s·∫Ω t·ª± ƒë·ªông ch·∫°y l·∫°i script
    # v√† c·∫≠p nh·∫≠t `active_chat_idx`
    st.session_state.active_chat_idx = st.radio(
        "Ch·ªçn m·ªôt cu·ªôc h·ªôi tho·∫°i:",
        range(len(st.session_state.chat_sessions)),
        format_func=lambda i: f"Cu·ªôc h·ªôi tho·∫°i #{i + 1}",
        index=st.session_state.active_chat_idx,
        label_visibility="collapsed" # ·∫®n label "Ch·ªçn m·ªôt cu·ªôc h·ªôi tho·∫°i:"
    )

    st.markdown("---")

    # N√∫t ƒë·ªÉ x√≥a cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i
    if st.button("üóëÔ∏è X√≥a cu·ªôc h·ªôi tho·∫°i n√†y", type="secondary"):
        # Ch·ªâ x√≥a n·∫øu c√≤n nhi·ªÅu h∆°n 1 cu·ªôc h·ªôi tho·∫°i
        if len(st.session_state.chat_sessions) > 1:
            st.session_state.chat_sessions.pop(st.session_state.active_chat_idx)
            # Chuy·ªÉn v·ªÅ cu·ªôc h·ªôi tho·∫°i ƒë·∫ßu ti√™n sau khi x√≥a ƒë·ªÉ tr√°nh l·ªói index
            if st.session_state.active_chat_idx >= len(st.session_state.chat_sessions):
                st.session_state.active_chat_idx = len(st.session_state.chat_sessions) - 1
        else:
            # N·∫øu ch·ªâ c√≤n 1, th√¨ ch·ªâ x√≥a n·ªôi dung c·ªßa n√≥
            st.session_state.chat_sessions[0] = []
        st.rerun()

# --- Giao di·ªán Chat ch√≠nh ---
st.title(f"üí¨ Chatbot B·ªô Mobile - Cu·ªôc h·ªôi tho·∫°i #{st.session_state.active_chat_idx + 1}")

# L·∫•y ra cu·ªôc h·ªôi tho·∫°i ƒëang ho·∫°t ƒë·ªông d·ª±a tr√™n ch·ªâ s·ªë
active_chat = st.session_state.chat_sessions[st.session_state.active_chat_idx]

# 1. Hi·ªÉn th·ªã c√°c tin nh·∫Øn ƒë√£ c√≥ trong cu·ªôc h·ªôi tho·∫°i ƒëang ho·∫°t ƒë·ªông
for message in active_chat:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# 2. Ch·ªù ƒë·ª£i v√† x·ª≠ l√Ω input m·ªõi c·ªßa ng∆∞·ªùi d√πng
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ..."):
    # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ c·ªßa cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i
    active_chat.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi c·ªßa bot v·ªõi hi·ªáu ·ª©ng streaming
    with st.chat_message("assistant"):
        bot_placeholder = st.empty()
        # Hi·ªÉn th·ªã m·ªôt th√¥ng b√°o ch·ªù t·∫°m th·ªùi trong khi g·ªçi API
        bot_placeholder.markdown("ƒêang suy nghƒ©...")
        full_response = ""

        # Chu·∫©n b·ªã history ƒë·ªÉ g·ª≠i cho API (l·∫•y 4 tin nh·∫Øn g·∫ßn nh·∫•t)
        history_for_api = [
            {"role": msg["role"], "content": msg["content"]}
            for msg in active_chat[-5:-1] # L·∫•y 4 tin nh·∫Øn tr∆∞·ªõc tin nh·∫Øn hi·ªán t·∫°i
        ]

        try:
            # --- G·ªåI API TH·∫¨T C·ª¶A B·∫†N ---
            # S·ª≠ d·ª•ng with ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi ƒë∆∞·ª£c ƒë√≥ng ƒë√∫ng c√°ch
            with requests.post(
                "http://localhost:8000/chat", 
                json={
                    "history": history_for_api,
                    "question": prompt
                }, 
                stream=True, 
                timeout=300
            ) as response:
                # B√°o l·ªói n·∫øu request kh√¥ng th√†nh c√¥ng (vd: l·ªói 4xx, 5xx)
                response.raise_for_status() 
                # D√πng iter_content ƒë·ªÉ x·ª≠ l√Ω streaming an to√†n h∆°n
                for chunk in response.iter_content(chunk_size=None, decode_unicode=True):
                    if chunk:
                        full_response += chunk
                        # Th√™m con tr·ªè nh·∫•p nh√°y ƒë·ªÉ t·∫°o c·∫£m gi√°c "ƒëang g√µ"
                        bot_placeholder.markdown(full_response + "‚ñå")

            # C·∫≠p nh·∫≠t placeholder l·∫ßn cu·ªëi ƒë·ªÉ x√≥a con tr·ªè
            bot_placeholder.markdown(full_response)

        except requests.exceptions.RequestException as e:
            full_response = f"**L·ªói:** Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra l·∫°i backend v√† th·ª≠ l·∫°i.\n\n*Chi ti·∫øt l·ªói: {e}*"
            bot_placeholder.markdown(full_response)
        except Exception as e:
            full_response = f"**L·ªói:** M·ªôt l·ªói kh√¥ng x√°c ƒë·ªãnh ƒë√£ x·∫£y ra.\n\n*Chi ti·∫øt l·ªói: {e}*"
            bot_placeholder.markdown(full_response)


    # Th√™m c√¢u tr·∫£ l·ªùi ho√†n ch·ªânh c·ªßa bot v√†o l·ªãch s·ª≠ c·ªßa cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i
    active_chat.append({"role": "assistant", "content": full_response})